
/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.console
import jk.socket
import jk.socket.io
import jk.socket.ssl

class:

main
{
	if new this().execute(args) == false:
		return 1
	return 0
}

func execute(args as array<string>) as bool
{
	var filePath as string
	var passPhrase as string
	var arguments = ConsoleApplicationUtil.parseCommandLineArguments(args)
	foreach arg in arguments {
		if arg.isOption("path") {
			filePath = arg.getStringValue()
		}
		if arg.isOption("pass") {
			passPhrase = arg.getStringValue()
		}
	}
	var ctx = new ConsoleApplicationContext()
	ctx.setEnableDebugMessages(true)
	if filePath {
		var crt = File.forPath(filePath)
		assert crt.isFile():
			Log.error(ctx, "Failed to get cert")
		var iomanager = IOManager.createDefault()
		var socket = assert TCPSocket.createAndListen(8080) {
			Log.error(ctx, "Failed to create and listen to port 8080")
		}
		var esk = assert iomanager.addWithReadListener(socket, func {
			Log.debug(ctx, "New connection detected")
			var ss as ConnectedSocket
			var connectedSocket = assert socket.accept() {
				Log.error(ctx, "Failed to accept incoming connection")
			}
			Log.debug(ctx, "Connection accepted...")
			var sslSocket = assert SSLSocket.forServer(connectedSocket, crt, null, ctx, true, passPhrase) {
				Log.error(ctx, "Failed to create SSL socket")
				connectedSocket.close()
			}
			ss = sslSocket
			Log.debug(ctx, "SSL socket created successfully")
			var ioEntry = assert iomanager.add(ss) {
				Log.error(ctx, "Failed to add connected socket to io manager")
			}
			ioEntry.setReadListener(func {
				var buf = malloc 1024
				var i = ss.read(buf)
				if i < 0 {
					Log.error(ctx, "Failed to read incoming data. Closing connected socket" )
					ss.close()
				}
				else {
					Log.debug(ctx, "Received message `" .. String.asString(buf) .. "'")
				}
				ss.write(buf, i)
			})
		})
		assert iomanager.execute(ctx):
			Log.error(ctx, "Failed to execute io manager")
		Log.debug(ctx, "io exited normally")
		return true
	}
	return false
}


/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.socket
import jk.socket.io
import jk.console

class:

main
{
	var iomanager = IOManager.createDefault()
	var ctx as LoggingContext = new ConsoleApplicationContext()
	(ctx as! ConsoleApplicationContext).setEnableDebugMessages(true)
	var openSocket = TCPSocket.createAndListen(8081)
	iomanager.addWithReadListener(openSocket, func {
		var buff = Buffer.allocate(200)
		var nn = assert openSocket.accept():
			Log.error(ctx, "Failed to accept an incoming client")
		nn.read(buff)
		Log.debug(ctx, "Receive data : " .. String.asString(buff))
	})
	iomanager.execute(ctx)
}

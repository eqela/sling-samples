
/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget
import jk.widget.common
import jk.widget.file

class is ScreenForWidget #screen #main:

func initialize override
{
	base.initialize()
	setWidget(new FileWidget(context))
}

class FileWidget #widget
{
	ui LayerWidget
	{
		VerticalBoxWidget {
			LabelWidget {
				text = "Choose File"
				textColor = Color.black()
				fontFamily = "Raleway-Regular"
				fontSize = context.getHeightValue("5mm")
			}
			TextInputWidget attachment {
				padding = context.getHeightValue("2500um")
			}
			ImageWidget image {
				imageScaleMethod = ImageWidget.FIT
			}
		}
	}

	func initializeWidget override
	{
		base.initializeWidget()
		Widget.setWidgetClickHandler(attachment, func {
			FileSelector.openFileDialog(this, "image/*", func(buffer as buffer, filename as string, mimetype as string, err as Error) {
				if err {
					println err.toString()
					return
				}
				var data = new DynamicMap()
				data.setObject("data", buffer)
				data.setString("filename", filename)
				data.setString("mimetype", mimetype)
				setData(data)
			})
		})
	}

	func setData(data as DynamicMap)
	{
		assert data
		var img = context.getImageForBufferSync(data.getBuffer("data"), data.getString("mimetype"))
		var photo = img.scaleToHeightSync(Widget.getHeight(this))
		image.setWidgetImage(photo)
	}
}

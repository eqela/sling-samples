
/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.console
import jk.socket
import jk.socket.ssl

class:

main
{
	if new this().execute(args) == false:
		return 1
	return 0
}

func execute(args as array<string>) as bool
{
	var passPhrase as string
	var arguments = ConsoleApplicationUtil.parseCommandLineArguments(args)
	foreach arg in arguments {
		if arg.isOption("pass"):
			passPhrase = arg.getStringValue()
	}
	var ctx = new ConsoleApplicationContext()
	ctx.setEnableDebugMessages(true)
	var socket = TCPSocket.createAndConnect("localhost", 8080)
	if socket == null {
		Log.error(ctx, "Failed to connect to server")
		return false
	}
	Log.debug(ctx, "Connected to server")
	var sslSocket = SSLSocket.forClient(socket, "localhost", ctx, false, passPhrase)
	if sslSocket == null {
		Log.error(ctx, "Failed to create SSL socket")
		return false
	}
	Log.debug(ctx, "SSLSocket successfully created")
	var data = String.toUTF8Buffer("Hello World")
	Log.debug(ctx, "Sending data to server")
	sslSocket.write(data, Buffer.getSize(data) as int)
	return true
}

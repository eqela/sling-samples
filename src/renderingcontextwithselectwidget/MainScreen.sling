
/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.render
import jk.widget
import jk.widget.common

class is ScreenForWidget #screen #main:

func initialize override
{
	base.initialize()
	var widget = new MainWidget(getContext())
	setWidget(widget)
}

class MainWidget #widget
{
	ui LayerWidget
	{
		VerticalBoxWidget vb {
			margin = context.getHeightValue("2mm")
			LayerWidget lyr : 1.0 {
			}
		}
	}

	func initializeWidget override
	{
		base.initializeWidget()
		var select = new SelectWidget(context)
		select.addWidgetItem("Option 1")
		select.addWidgetItem("Option 2")
		select.addWidgetItem("Option 3")
		select.addWidgetItem("Option 4")
		vb.addWidget(select, 1.0)
		var layer = new LayerWidget(context)
		layer.setWidgetMaximumWidthRequest(context.getHeightValue("20mm"))
		var rend = RenderableWidget.forRenderer(context, new MyRenderer())
		layer.addWidget(rend)
		lyr.addWidget(layer)
	}
}

class MyRenderer is Renderer
{
	func render(ctx as RenderingContext, width as double, height as double)
	{
		var tfh = height * 0.035
		ctx.fillText("SAMPLE TEXT", width / 2, tfh / 2, 0)
		ctx.setFillStyle(Color.black())
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.rotate(90.0)
		ctx.save()
		ctx.restore()
	}
}

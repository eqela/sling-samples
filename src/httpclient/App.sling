
/*
 * This file is part of Sling Samples
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.console
import jk.http.client

class:

main
{
	if sizeof args < 1 {
		println "Not enough arguments"
		return 1
	}
	var httpc = HTTPClient.createDefault()
	var req as HTTPClientRequest
	var asz = sizeof args
	if asz == 1 {
		req = HTTPClientRequest.forGET(args[0])
	}
	else if asz >= 3 {
		var ff = File.forPath(args[2])
		if not ff.isFile() {
			println "Not a file: `" .. args[2] .. "'"
			return 1
		}
		var reader = ff.read()
		if not reader {
			println "Failed to read: `" .. args[2] .. "'"
			return 1
		}
		req = HTTPClientRequest.forPOST(args[0], args[1], reader)
		// NOTE: The following is the same thing as the above, except that
		// the one below reads the file contents in memory first, while the one above
		// streams the file directly from storage (using less memory).
		/*
		var buf = ff.getContentsBuffer();
		if not buf {
			println "Failed to read: `" .. args[2] .. "'"
			return 1
		}
		req = HTTPClientRequest.forPOST(args[0], args[1], buf)
		*/
	}
	else {
		println "Unknown parameters. Giving up."
		return 1
	}
	var ctx = new ConsoleApplicationContext()
	HTTPClient.executeForBuffer(ctx, httpc, req, func(resp as HTTPClientResponse, data as buffer) {
		assert resp:
			println "HTTP Request Failed"
		println resp.toString()
		if sizeof args >= 4 {
			var of = File.forPath(args[3])
			if not of.setContentsBuffer(data):
				println "FAILED to write output file: " .. of.getPath()
		}
	})
	return 0
}
